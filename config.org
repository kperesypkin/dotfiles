#+title: My GNU Emacs Config
#+author: Kirill Peresypkin
#+description: My personal Emacs config.
#+startup: showeverything
#+options: toc:2


* TABLE OF CONTENTS :toc:
- [[IMPORTANT PROGRAMS TO LOAD FIRST][Important programs to load first]]
- 
- 
- 
- 

* IMPORTANT PROGRAMS TO LOAD FIRST

** Adding the scripts directory to path
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.config/emacs/scripts/")
#+END_SRC

** Sourcing the scripts
#+BEGIN_SRC emacs-lisp
(require 'packages-setup) ;; Package sources and 'use-package' setup
#+END_SRC

* NERD ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
#+BEGIN_SRC emacs-lisp
(use-package nerd-icons
  :ensure t
  :if (display-graphics-p))

(use-package nerd-icons-dired
  :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))
#+END_SRC

* BACKUP
By default, Emacs creates automatic backups of files in their original directories. This leads to a lot of clutter, so let's tell Emacs to put all backups that it creates in the =TRASH= directory.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+END_SRC

* COMPANY
[[https://company-mode.github.io][Company]] is a text completion framework for Emacs.
#+BEGIN_SRC emacs-lisp
(use-package company
  :demand
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .3)
  (company-minimum-prefix-length 2)
  (company-tooltip-minimum 4)
  (company-tooltip-flip-when-above t)
  (company-tooltip-limit 10)
  (company-tooltip-offset-display 'lines)
  (company-tooltip-align-annotations t)
  (company-begin-commands '(self-insert-command))
  (company-selection-wrap-around t)
  (company-show-numbers nil)
  (company-require-match nil)
  (company-transformers '(company-sort-by-backend-importance
                          company-sort-prefer-same-case-prefix
                          company-sort-by-occurrence))
  :hook
  (after-init . global-company-mode)
  :bind
  (:map
   company-active-map
   ("<tab>" . company-complete-selection)
   ("C-n" . company-select-next)
   ("C-p" . company-select-previous)))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))

(use-package company-flx
  :after company
  :hook
  (company-mode . company-flx-mode))

(use-package company-quickhelp
  :after (ompany
  :diminish company-quickhelp-mode
  :bind
  (:map
   company-active-map
   ("C-d" . company-quickhelp-manual-begin)))
#+END_SRC
